[tool.poetry]
name = "cumplo-herald"
version = "0.2.2"
description = "A multi-channel notification service designed to keep Cumplo investors ahead with real-time alerts"
authors = ["Cristobal Sfeir <cnsfeir@uc.cl>"]
packages = [{ include = "cumplo_herald" }]

[tool.poetry.dependencies]
python = "^3.12"
arrow = "^1.2.3"
pydantic = "^2.1.1"
python-dotenv = "^1.0.0"
google-cloud-logging = "^3.5.0"
fastapi = "^0.109.1"
uvicorn = "^0.23.1"
case-converter = "^1.1.0"
cumplo-common = { version = "^1.2.1", source = "cumplo-pypi" }
twilio = "^9.0.2"

[tool.poetry.dev-dependencies]
ruff = "^0.7.1"
mypy = "^1.13.0"
docformatter = "^1.7.5"

[[tool.poetry.source]]
name = "cumplo-pypi"
url = "https://us-central1-python.pkg.dev/cumplo-scraper/cumplo-pypi/simple/"
priority = "supplemental"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
exclude = ".venv"

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "pydantic.*",
    "psycopg2.*",
    "lxml.*",
    "babel.*",
    "bs4.*",
    "functions_framework.*",
    "firebase_admin.*",
    "retry.*",
    "starlette.*",
    "google.cloud.pubsub.*",
    "numpy_financial.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
target-version = "py312"
preview = true

lint.ignore = [
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in method
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "D100",   # Missing docstring in public module
    "D107",   # Missing docstring in __init__
    "D105",   # Missing docstring in magic method
    "D212",   # Multi-line docstring summary should start at the second line
    "D203",   # One blank line required before class docstring
    "D101",   # Missing docstring in public class
    "D104",   # Missing docstring in public package
    "G004",   # Logging statement uses string formatting
    "S113",   # Use of `requests` call without timeout
    "DOC201", # Missing documentation for `return` in docstring
    "COM812", # Missing trailing comma in a dictionary
    "ISC001", # Implicit string concatenation
    # =====
    "PT011",  # ValueError is too broad, set the `match` parameter
    "PT013",  # Incorrect import of `pytest`; use `import pytest` instead
    "FBT003", # Boolean positional value in function call
    "D102",   # Missing docstring in public method
    "EM101",  # Exception must not use a string literal, assign to variable first
    "DOC501", # Raised exception `ValueError` missing from docstring
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM102",  # Exception must not use an f-string literal, assign to variable first
]
lint.extend-select = [
    "A",     # flake8-builtins
    "AIR",   # flake8-airflow
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C",     # pylint (Convention)
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DJ",    # flake8-django
    "DOC",   # pydoclint
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle (Error)
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    "FAST",  # FastAPI
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle (Warning)
    "YTT",   # flake8-2020
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR6301"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.docformatter]
pre-summary-newline = true # Ensures that multiline docstrings start on a new line.
wrap-descriptions = 120    # Wraps descriptions at 114 characters, ensuring consistent line width.
wrap-summaries = 120       # Wraps summary lines only if they exceed 114 characters.
recursive = true           # Recursively formats all Python files in the specified directories.
blank = true               # Adds a blank line before the end of multiline docstrings.
